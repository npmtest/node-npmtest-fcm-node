{"/home/travis/build/npmtest/node-npmtest-fcm-node/test.js":"/* istanbul instrument in package npmtest_fcm_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fcm-node/lib.npmtest_fcm_node.js":"/* istanbul instrument in package npmtest_fcm_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fcm_node = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fcm_node = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fcm-node/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fcm-node && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fcm_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fcm_node\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fcm_node.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_fcm_node.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fcm_node.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_fcm_node.__dirname + '/lib.npmtest_fcm_node.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fcm-node/node_modules/fcm-node/index.js":"module.exports = require('./lib/fcm');","/home/travis/build/npmtest/node-npmtest-fcm-node/node_modules/fcm-node/lib/fcm.js":"var https = require('https');\r\nvar retry = require('retry');\r\nvar firebaseadmin = require(\"firebase-admin\");\r\nconst TopicRequest = require('../lib/topic_request');\r\nconst TopicOptions = require('../lib/topic_options');\r\nconst TopicData = require('../lib/topic_data');\r\n\r\n\r\nfunction FCM(accountKey) {\r\n    if(!accountKey) {\r\n        throw Error('You must provide the APIKEY for your firebase application.');\r\n    }\r\n    else if(typeof accountKey == 'string') { //API KEY PASSED string, legacy use\r\n\r\n        this.serverKey = accountKey;\r\n\r\n        this.fcmOptions = {\r\n            host: 'fcm.googleapis.com',\r\n            port: 443,\r\n            path: '/fcm/send',\r\n            method: 'POST',\r\n            headers: {}\r\n        };\r\n\r\n        this.send = function (payload, CB) {\r\n\r\n            var self = this;\r\n            if (!CB) {\r\n                throw Error('you must provide a callback function(err,result)'); //just in case\r\n            }\r\n            else {\r\n                var operation = retry.operation();\r\n                var mpayload = JSON.stringify(payload);\r\n                var mFcmOptions = JSON.parse(JSON.stringify(self.fcmOptions)) //copying the fcmOptions object to avoid problems in parallel calls\r\n\r\n                operation.attempt(function (currentAttempt) {\r\n                    var headers = {\r\n                        'Host': mFcmOptions.host,\r\n                        'Authorization': 'key=' + self.serverKey,\r\n                        'Content-Type': 'application/json'\r\n                        //'Content-Length': mpayload.length //removed this line for chunk-encoded transfer compatibility (UTF-8 and all non-ANSI codification)\r\n                    };\r\n\r\n                    mFcmOptions.headers = headers;\r\n\r\n                    if (self.keepAlive) headers.Connection = 'keep-alive';\r\n\r\n                    var request = https.request(mFcmOptions, function (res) {\r\n                        var data = '';\r\n\r\n\r\n                        if (res.statusCode == 503) {\r\n                            // If the server is temporary unavailable, the FCM spec requires that we implement exponential backoff\r\n                            // and respect any Retry-After header\r\n                            if (res.headers['retry-after']) {\r\n                                var retrySeconds = res.headers['retry-after'] * 1; // force number\r\n                                if (isNaN(retrySeconds)) {\r\n                                    // The Retry-After header is a HTTP-date, try to parse it\r\n                                    retrySeconds = new Date(res.headers['retry-after']).getTime() - new Date().getTime();\r\n                                }\r\n                                if (!isNaN(retrySeconds) && retrySeconds > 0) {\r\n                                    operation._timeouts['minTimeout'] = retrySeconds;\r\n                                }\r\n                            }\r\n                            if (!operation.retry('TemporaryUnavailable')) {\r\n                                CB(operation.mainError(), null);\r\n                            }\r\n                            // Ignore all subsequent events for this request\r\n                            return;\r\n                        }\r\n\r\n                        function respond() {\r\n                            var error = null, id = null;\r\n\r\n                            //Handle the various responses\r\n                            if (data.indexOf('\\\"multicast_id\\\":') > -1)//multicast_id success\r\n                            {\r\n                                var anyFail = ((JSON.parse(data)).failure > 0);\r\n\r\n                                if (anyFail) {\r\n                                    error = data.substring(0).trim();\r\n                                }\r\n\r\n                                var anySuccess = ((JSON.parse(data)).success > 0);\r\n\r\n                                if (anySuccess) {\r\n                                    id = data.substring(0).trim();\r\n                                }\r\n                            } else if (data.indexOf('\\\"message_id\\\":') > -1) {  //topic messages success\r\n                                id = data;\r\n                            } else if (data.indexOf('\\\"error\\\":') > -1) { //topic messages error\r\n                                error = data;\r\n                            } else if (data.indexOf('TopicsMessageRateExceeded') > -1) {\r\n                                error = 'TopicsMessageRateExceededError'\r\n                            } else if (data.indexOf('Unauthorized') > -1) {\r\n                                error = 'NotAuthorizedError'\r\n                            } else {\r\n                                error = 'InvalidServerResponse';\r\n                            }\r\n                            // Only retry if error is QuotaExceeded or DeviceQuotaExceeded\r\n                            if (operation.retry(currentAttempt <= 3 && ['QuotaExceeded', 'DeviceQuotaExceeded', 'InvalidServerResponse'].indexOf(error) >= 0 ? error : null)) {\r\n                                return;\r\n                            }\r\n                            // Success, return message id (without id=)\r\n                            CB(error, id);\r\n                        }\r\n\r\n                        res.on('data', function (chunk) {\r\n                            data += chunk;\r\n                        });\r\n                        res.on('end', respond);\r\n                        res.on('close', respond);\r\n                    });\r\n\r\n                    request.on('error', function (error) {\r\n                        CB(error, null);\r\n                    });\r\n\r\n                    request.end(mpayload);\r\n                });\r\n            }\r\n        }\r\n\r\n        // Subscribe devices to topic\r\n        // If topic does not exist, a new one is created\r\n        this.subscribeToTopic = (deviceTokens, topicName, CB) => {\r\n\r\n            const options = TopicOptions('iid.googleapis.com', '/iid/v1:batchAdd', 'POST', this.serverKey.slice(0));\r\n            const subscriptionData = TopicData(topicName, deviceTokens);\r\n\r\n            TopicRequest(options, subscriptionData, (err, res) => {\r\n                CB(err, res);\r\n            });\r\n        }\r\n\r\n        // Unsubscribe device to topic\r\n        this.unsubscribeToTopic = (deviceTokens, topicName, CB) => {\r\n            const options = TopicOptions('iid.googleapis.com', '/iid/v1:batchRemove', 'POST', this.serverKey.slice(0));\r\n            const unsubscriptionData = TopicData(topicName, deviceTokens);\r\n\r\n            TopicRequest(options, unsubscriptionData, (err, res) => {\r\n                CB(err, res);\r\n            });\r\n        }\r\n    }\r\n    else{ //accountkey object passed, new SDK 'de-promisefy' use\r\n        firebaseadmin.initializeApp({\r\n            credential: firebaseadmin.credential.cert(accountKey)\r\n        });\r\n\r\n        this.send = function(payload, _callback){\r\n            if (!_callback) {\r\n                throw Error('You must provide a callback function(err,result)')\r\n            }\r\n            else{\r\n                if(!payload) _callback(new Error('You must provide a payload object'))\r\n                else{\r\n                    if(payload.to) {\r\n                        if (typeof payload.to == 'string') {\r\n                            var to = payload.to\r\n                            delete payload.to\r\n                            if (to.startsWith('/topics/')) {\r\n                                var topic = to.slice(8)//anything after '/topics/'\r\n\r\n                                firebaseadmin.messaging().sendToTopic(topic, payload)\r\n                                    .then(function(response){_callback(null, response)})\r\n                                    .catch(function (err) {_callback(err)})\r\n                            }\r\n                            else{\r\n                                firebaseadmin.messaging().sendToDevice(to,payload)\r\n                                    .then(function (response) {_callback(null,response)})\r\n                                    .catch(function (error) {_callback(error)})\r\n                            }\r\n                        }\r\n                        else{\r\n                            var err = new Error('Invalid \"to\" field in payload');\r\n                            _callback(err)\r\n                        }\r\n                    }\r\n                    else if(payload.registration_ids){\r\n                        var regIds = payload.registration_ids;\r\n                        delete payload.registration_ids;\r\n                        if(regIds instanceof Array && typeof regIds[0] == 'string')\r\n                        {\r\n                            firebaseadmin.messaging().sendToDevice(regIds, payload)\r\n                                .then(function (response) {_callback(null,response)})\r\n                                .catch(function (error) {_callback(error)})\r\n                        }\r\n                        else{\r\n                            var err = new Error('Invalid \"registration_ids\" field in payload');\r\n                            _callback(err)\r\n                        }\r\n                    }\r\n                    else{\r\n                        var err = new Error('Invalid payload object');\r\n                        _callback(err)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = FCM;\r\n\r\n","/home/travis/build/npmtest/node-npmtest-fcm-node/node_modules/fcm-node/lib/topic_request.js":"var https = require('https');\n\nfunction TopicRequest(options, data, CB){\n    const payload = JSON.stringify(data);\n    const request = https.request(options, (res) => {\n        \n        let body = '';\n\n        if(res.statusCode !== 200){\n            CB({\n                statusCode: res.statusCode,\n                message: res.statusMessage\n            }, null);\n        }else{\n            res.on('data', function(chunk){\n                body += chunk;\n            });\n\n            res.on('end', function(){\n                CB(null, JSON.parse(body))\n            });\n        }\n    }).on('error', (e) => {\n         CB(JSON.parse(e), null);\n    }).end(payload);\n}\n\nmodule.exports = TopicRequest;","/home/travis/build/npmtest/node-npmtest-fcm-node/node_modules/fcm-node/lib/topic_options.js":"function TopicOptions(host, path, method, serverKey) {\n    this.topicOptions = {\n        host,\n        path,\n        method,\n        json: true,\n        headers: { }\n    };\n\n    this.topicOptions.headers = {\n        'Host': topicOptions.host,\n        'Authorization': 'key=' + serverKey,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    };\n\n    return topicOptions;\n}\n\nmodule.exports = TopicOptions;","/home/travis/build/npmtest/node-npmtest-fcm-node/node_modules/fcm-node/lib/topic_data.js":"function TopicData(topicName, registration_tokens) {\n    return {\n        to: `/topics/${topicName}`,\n        registration_tokens\n    };\n}\n\nmodule.exports = TopicData;"}